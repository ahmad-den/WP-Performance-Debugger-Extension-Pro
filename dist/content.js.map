{"version":3,"file":"content.js","mappings":"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","sources":["webpack://new-bs-helper-extension/./src/utils/messaging.js","webpack://new-bs-helper-extension/./src/content/performance/cls-monitor.js","webpack://new-bs-helper-extension/./src/content/performance/lcp-monitor.js","webpack://new-bs-helper-extension/./src/content/performance/inp-monitor.js","webpack://new-bs-helper-extension/./src/content/performance/additional-metrics.js","webpack://new-bs-helper-extension/./src/utils/dom-helpers.js","webpack://new-bs-helper-extension/./src/content/analyzers/image-analyzer.js","webpack://new-bs-helper-extension/./src/content/analyzers/font-analyzer.js","webpack://new-bs-helper-extension/./src/content/analyzers/psi-analyzer.js","webpack://new-bs-helper-extension/./src/content/index.js","webpack://new-bs-helper-extension/./src/utils/formatters.js"],"sourcesContent":["/**\n * Safely sends a message to the extension runtime\n * @param {Object} message - The message to send\n * @param {Function} callback - Optional callback function\n */\nexport function safeSendMessage(message, callback) {\n  try {\n    chrome.runtime.sendMessage(message, (response) => {\n      if (chrome.runtime.lastError) {\n        return\n      }\n      if (callback) callback(response)\n    })\n  } catch (error) {\n    // Extension context invalidated or other error\n    console.debug(\"Message sending failed:\", error)\n  }\n}\n\n/**\n * Sends a message to a specific tab\n * @param {number} tabId - The ID of the tab to send the message to\n * @param {Object} message - The message to send\n * @param {Function} callback - Optional callback function\n */\nexport function sendMessageToTab(tabId, message, callback) {\n  try {\n    chrome.tabs.sendMessage(tabId, message, (response) => {\n      if (chrome.runtime.lastError) {\n        return\n      }\n      if (callback) callback(response)\n    })\n  } catch (error) {\n    console.debug(\"Tab message sending failed:\", error)\n  }\n}\n\n/**\n * Sets up a listener for messages from content scripts or popup\n * @param {Object} handlers - Object mapping action names to handler functions\n */\nexport function setupMessageListener(handlers) {\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    const action = message.action\n    if (handlers[action]) {\n      handlers[action](message, sender, sendResponse)\n    }\n    return true // Keep the message channel open for async responses\n  })\n}\n","import { safeSendMessage } from \"../../utils/messaging.js\"\n\n// CLS monitoring variables\nlet clsValue = 0\nconst clsEntries = []\nlet largestShiftElement = null\nlet largestShiftValue = 0\n\n/**\n * Initializes CLS (Cumulative Layout Shift) monitoring\n */\nexport function initializeCLSMonitoring() {\n  if (!window.PerformanceObserver) return\n\n  try {\n    const observer = new PerformanceObserver((entryList) => {\n      for (const entry of entryList.getEntries()) {\n        if (!entry.hadRecentInput) {\n          clsValue += entry.value\n\n          // Find the element that caused the largest shift\n          if (entry.sources && entry.sources.length > 0) {\n            const largestSource = entry.sources.reduce((largest, source) => {\n              const sourceShift = calculateShiftValue(source)\n              const largestShift = calculateShiftValue(largest)\n              return sourceShift > largestShift ? source : largest\n            })\n\n            if (entry.value > largestShiftValue) {\n              largestShiftValue = entry.value\n              largestShiftElement = largestSource.node\n            }\n          }\n\n          const entryData = {\n            value: entry.value,\n            startTime: entry.startTime,\n            sources: entry.sources\n              ? entry.sources.map((source) => ({\n                  node: source.node ? source.node.tagName : \"unknown\",\n                  currentRect: source.currentRect,\n                  previousRect: source.previousRect,\n                  shiftValue: calculateShiftValue(source),\n                }))\n              : [],\n          }\n\n          clsEntries.push(entryData)\n\n          // Extract element info if we have the largest shift element\n          let elementInfo = null\n          if (largestShiftElement) {\n            elementInfo = extractCLSElementInfo(largestShiftElement, largestShiftValue)\n            console.log(\"CLS element extracted:\", elementInfo)\n          } else {\n            console.log(\"No largest shift element found\")\n          }\n\n          console.log(\"CLS detected:\", clsValue, \"element:\", largestShiftElement, \"info:\", elementInfo)\n\n          safeSendMessage({\n            action: \"updateCLS\",\n            value: clsValue,\n            entries: clsEntries,\n            element: elementInfo,\n            rating: clsValue < 0.1 ? \"good\" : clsValue < 0.25 ? \"needs-improvement\" : \"poor\",\n          })\n        }\n      }\n    })\n\n    observer.observe({ type: \"layout-shift\", buffered: true })\n\n    setTimeout(() => {\n      let elementInfo = null\n      if (largestShiftElement) {\n        elementInfo = extractCLSElementInfo(largestShiftElement, largestShiftValue)\n      }\n\n      safeSendMessage({\n        action: \"updateCLS\",\n        value: clsValue,\n        entries: clsEntries,\n        element: elementInfo,\n        rating: clsValue < 0.1 ? \"good\" : clsValue < 0.25 ? \"needs-improvement\" : \"poor\",\n      })\n    }, 1000)\n  } catch (error) {\n    // Silent error handling\n  }\n}\n\n/**\n * Calculates the shift value for a layout shift source\n * @param {Object} source - Layout shift source\n * @returns {number} Shift value\n */\nfunction calculateShiftValue(source) {\n  if (!source.currentRect || !source.previousRect) return 0\n\n  const currentRect = source.currentRect\n  const previousRect = source.previousRect\n\n  // Calculate the distance moved\n  const deltaX = Math.abs(currentRect.x - previousRect.x)\n  const deltaY = Math.abs(currentRect.y - previousRect.y)\n\n  // Calculate the area affected\n  const area = Math.max(currentRect.width * currentRect.height, previousRect.width * previousRect.height)\n\n  // Simple shift calculation (distance * area factor)\n  return (deltaX + deltaY) * (area / (window.innerWidth * window.innerHeight))\n}\n\n/**\n * Extracts comprehensive information from the CLS element\n * @param {HTMLElement} element - The element that caused layout shift\n * @param {number} shiftValue - The shift value for this element\n * @returns {Object} Detailed element information\n */\nfunction extractCLSElementInfo(element, shiftValue) {\n  if (!element || !element.getBoundingClientRect) {\n    console.log(\"Invalid element for CLS extraction:\", element)\n    return null\n  }\n\n  try {\n    const rect = element.getBoundingClientRect()\n    const computedStyle = window.getComputedStyle(element)\n\n    // Get all classes as an array\n    const classList = Array.from(element.classList || [])\n\n    // Extract background image if present\n    const backgroundImage = computedStyle.backgroundImage\n    let backgroundImageUrl = null\n    if (backgroundImage && backgroundImage !== \"none\") {\n      const match = backgroundImage.match(/url$$['\"]?([^'\"]+)['\"]?$$/)\n      backgroundImageUrl = match ? match[1] : null\n    }\n\n    // Determine the primary source URL\n    let primarySource = element.src || backgroundImageUrl || null\n\n    // For picture elements, get the actual displayed source\n    if (element.tagName && element.tagName.toLowerCase() === \"img\" && element.currentSrc) {\n      primarySource = element.currentSrc\n    }\n\n    // Generate element selector for easier identification\n    const selector = generateCLSElementSelector(element)\n\n    const elementInfo = {\n      tagName: element.tagName ? element.tagName.toLowerCase() : \"unknown\",\n      id: element.id || null,\n      classList: classList,\n      classString: classList.join(\" \") || null,\n      selector: selector,\n      src: element.src || null,\n      currentSrc: element.currentSrc || null,\n      backgroundImageUrl: backgroundImageUrl,\n      primarySource: primarySource,\n      alt: element.alt || null,\n      title: element.title || null,\n      textContent: element.textContent ? element.textContent.substring(0, 200) : null,\n      shiftValue: shiftValue,\n      dimensions: {\n        width: element.offsetWidth || 0,\n        height: element.offsetHeight || 0,\n        naturalWidth: element.naturalWidth || null,\n        naturalHeight: element.naturalHeight || null,\n      },\n      position: {\n        top: element.offsetTop || 0,\n        left: element.offsetLeft || 0,\n        viewportTop: rect.top,\n        viewportLeft: rect.left,\n      },\n      styles: {\n        position: computedStyle.position,\n        display: computedStyle.display,\n        float: computedStyle.float,\n        transform: computedStyle.transform,\n      },\n      attributes: extractRelevantCLSAttributes(element),\n      preview: primarySource, // Use primary source for preview\n    }\n\n    return elementInfo\n  } catch (e) {\n    console.error(\"Error extracting CLS element info:\", e)\n    return null\n  }\n}\n\n/**\n * Generates a CSS selector for the CLS element\n * @param {HTMLElement} element - The element\n * @returns {string} CSS selector\n */\nfunction generateCLSElementSelector(element) {\n  if (!element.tagName) return \"unknown\"\n\n  if (element.id) {\n    return `#${element.id}`\n  }\n\n  let selector = element.tagName.toLowerCase()\n\n  if (element.classList && element.classList.length > 0) {\n    selector += \".\" + Array.from(element.classList).join(\".\")\n  }\n\n  // Add nth-child if no unique identifier\n  if (!element.id && (!element.classList || element.classList.length === 0)) {\n    try {\n      const siblings = Array.from(element.parentElement?.children || [])\n      const index = siblings.indexOf(element) + 1\n      if (index > 0) {\n        selector += `:nth-child(${index})`\n      }\n    } catch (e) {\n      // Ignore errors\n    }\n  }\n\n  return selector\n}\n\n/**\n * Extracts relevant attributes from the CLS element\n * @param {HTMLElement} element - The element\n * @returns {Object} Relevant attributes\n */\nfunction extractRelevantCLSAttributes(element) {\n  const relevantAttrs = [\"loading\", \"decoding\", \"fetchpriority\", \"sizes\", \"srcset\", \"data-src\", \"data-lazy\", \"style\"]\n  const attributes = {}\n\n  relevantAttrs.forEach((attr) => {\n    if (element.hasAttribute && element.hasAttribute(attr)) {\n      attributes[attr] = element.getAttribute(attr)\n    }\n  })\n\n  return attributes\n}\n\n/**\n * Highlights the CLS element on the page\n * @returns {boolean} True if element was highlighted\n */\nexport function highlightCLSElement() {\n  if (!largestShiftElement) return false\n\n  // Remove existing highlights\n  removeCLSHighlight()\n\n  const highlight = document.createElement(\"div\")\n  highlight.id = \"bigscoots-cls-highlight\"\n  highlight.style.cssText = `\n    position: absolute;\n    pointer-events: none;\n    z-index: 999999;\n    border: 3px solid #ff9500;\n    background: rgba(255, 149, 0, 0.1);\n    box-shadow: 0 0 0 2px rgba(255, 149, 0, 0.3), 0 0 20px rgba(255, 149, 0, 0.5);\n    animation: bigscoots-cls-pulse 2s infinite;\n    border-radius: 4px;\n  `\n\n  if (!document.getElementById(\"bigscoots-cls-highlight-styles\")) {\n    const style = document.createElement(\"style\")\n    style.id = \"bigscoots-cls-highlight-styles\"\n    style.textContent = `\n      @keyframes bigscoots-cls-pulse {\n        0% { box-shadow: 0 0 0 2px rgba(255, 149, 0, 0.3), 0 0 20px rgba(255, 149, 0, 0.5); }\n        50% { box-shadow: 0 0 0 6px rgba(255, 149, 0, 0.5), 0 0 30px rgba(255, 149, 0, 0.8); }\n        100% { box-shadow: 0 0 0 2px rgba(255, 149, 0, 0.3), 0 0 20px rgba(255, 149, 0, 0.5); }\n      }\n    `\n    document.head.appendChild(style)\n  }\n\n  const rect = largestShiftElement.getBoundingClientRect()\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft\n\n  highlight.style.top = rect.top + scrollTop - 3 + \"px\"\n  highlight.style.left = rect.left + scrollLeft - 3 + \"px\"\n  highlight.style.width = rect.width + 6 + \"px\"\n  highlight.style.height = rect.height + 6 + \"px\"\n\n  document.body.appendChild(highlight)\n\n  largestShiftElement.scrollIntoView({\n    behavior: \"smooth\",\n    block: \"center\",\n    inline: \"center\",\n  })\n\n  setTimeout(() => {\n    removeCLSHighlight()\n  }, 5000)\n\n  return true\n}\n\n/**\n * Removes CLS element highlight\n */\nfunction removeCLSHighlight() {\n  const existingHighlight = document.getElementById(\"bigscoots-cls-highlight\")\n  if (existingHighlight) {\n    existingHighlight.remove()\n  }\n}\n\n/**\n * Gets the current CLS data\n * @returns {Object} Current CLS data\n */\nexport function getCurrentCLSData() {\n  let elementInfo = null\n  if (largestShiftElement) {\n    elementInfo = extractCLSElementInfo(largestShiftElement, largestShiftValue)\n  }\n\n  return {\n    value: clsValue,\n    entries: clsEntries,\n    element: elementInfo,\n    rating: clsValue < 0.1 ? \"good\" : clsValue < 0.25 ? \"needs-improvement\" : \"poor\",\n  }\n}\n","import { safeSendMessage } from \"../../utils/messaging.js\"\n\n// LCP monitoring variables\nlet lcpValue = 0\nlet lcpElement = null\nlet lcpElementInfo = null\n\n/**\n * Initializes LCP (Largest Contentful Paint) monitoring\n */\nexport function initializeLCPMonitoring() {\n  if (!window.PerformanceObserver) return\n\n  try {\n    const observer = new PerformanceObserver((entryList) => {\n      const entries = entryList.getEntries()\n      const lastEntry = entries[entries.length - 1]\n\n      if (lastEntry) {\n        lcpValue = lastEntry.startTime\n        lcpElement = lastEntry.element\n\n        console.log(\"LCP detected:\", lcpValue, \"ms, element:\", lcpElement)\n\n        if (lcpElement) {\n          lcpElementInfo = extractElementInfo(lcpElement)\n          console.log(\"LCP element info extracted:\", lcpElementInfo)\n\n          safeSendMessage({\n            action: \"updateLCP\",\n            value: lcpValue,\n            element: lcpElementInfo,\n            rating: lcpValue < 2500 ? \"good\" : lcpValue < 4000 ? \"needs-improvement\" : \"poor\",\n          })\n        } else {\n          // Send LCP data even without element info\n          console.log(\"LCP detected but no element info available\")\n          safeSendMessage({\n            action: \"updateLCP\",\n            value: lcpValue,\n            element: null,\n            rating: lcpValue < 2500 ? \"good\" : lcpValue < 4000 ? \"needs-improvement\" : \"poor\",\n          })\n        }\n      }\n    })\n\n    observer.observe({ type: \"largest-contentful-paint\", buffered: true })\n\n    // Send initial data after a delay\n    setTimeout(() => {\n      console.log(\"Sending initial LCP data:\", lcpValue, lcpElementInfo)\n      safeSendMessage({\n        action: \"updateLCP\",\n        value: lcpValue,\n        element: lcpElementInfo,\n        rating: lcpValue < 2500 ? \"good\" : lcpValue < 4000 ? \"needs-improvement\" : \"poor\",\n      })\n    }, 2000)\n  } catch (error) {\n    console.log(\"LCP monitoring error:\", error)\n  }\n}\n\n/**\n * Extracts comprehensive information from the LCP element\n * @param {HTMLElement} element - The LCP element\n * @returns {Object} Detailed element information\n */\nfunction extractElementInfo(element) {\n  const rect = element.getBoundingClientRect()\n  const computedStyle = window.getComputedStyle(element)\n\n  // Get all classes as an array\n  const classList = Array.from(element.classList)\n\n  // Extract background image if present\n  const backgroundImage = computedStyle.backgroundImage\n  let backgroundImageUrl = null\n  if (backgroundImage && backgroundImage !== \"none\") {\n    const match = backgroundImage.match(/url$$['\"]?([^'\"]+)['\"]?$$/)\n    backgroundImageUrl = match ? match[1] : null\n  }\n\n  // Determine the primary source URL\n  let primarySource = element.src || backgroundImageUrl || null\n\n  // For picture elements, get the actual displayed source\n  if (element.tagName.toLowerCase() === \"img\" && element.currentSrc) {\n    primarySource = element.currentSrc\n  }\n\n  // Get parent information for context\n  const parentInfo = element.parentElement\n    ? {\n        tagName: element.parentElement.tagName.toLowerCase(),\n        classList: Array.from(element.parentElement.classList),\n        id: element.parentElement.id || null,\n      }\n    : null\n\n  // Generate element selector for easier identification\n  const selector = generateElementSelector(element)\n\n  const elementInfo = {\n    tagName: element.tagName.toLowerCase(),\n    id: element.id || null,\n    classList: classList,\n    classString: classList.join(\" \") || null,\n    selector: selector,\n    src: element.src || null,\n    currentSrc: element.currentSrc || null,\n    backgroundImageUrl: backgroundImageUrl,\n    primarySource: primarySource,\n    alt: element.alt || null,\n    title: element.title || null,\n    textContent: element.textContent ? element.textContent.substring(0, 200) : null,\n    dimensions: {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      naturalWidth: element.naturalWidth || null,\n      naturalHeight: element.naturalHeight || null,\n    },\n    position: {\n      top: element.offsetTop,\n      left: element.offsetLeft,\n      viewportTop: rect.top,\n      viewportLeft: rect.left,\n    },\n    styles: {\n      objectFit: computedStyle.objectFit,\n      objectPosition: computedStyle.objectPosition,\n      backgroundSize: computedStyle.backgroundSize,\n      backgroundPosition: computedStyle.backgroundPosition,\n    },\n    parent: parentInfo,\n    attributes: extractRelevantAttributes(element),\n    preview: primarySource, // Use primary source for preview\n  }\n\n  return elementInfo\n}\n\n/**\n * Generates a CSS selector for the element\n * @param {HTMLElement} element - The element\n * @returns {string} CSS selector\n */\nfunction generateElementSelector(element) {\n  if (element.id) {\n    return `#${element.id}`\n  }\n\n  let selector = element.tagName.toLowerCase()\n\n  if (element.classList.length > 0) {\n    selector += \".\" + Array.from(element.classList).join(\".\")\n  }\n\n  // Add nth-child if no unique identifier\n  if (!element.id && element.classList.length === 0) {\n    const siblings = Array.from(element.parentElement?.children || [])\n    const index = siblings.indexOf(element) + 1\n    selector += `:nth-child(${index})`\n  }\n\n  return selector\n}\n\n/**\n * Extracts relevant attributes from the element\n * @param {HTMLElement} element - The element\n * @returns {Object} Relevant attributes\n */\nfunction extractRelevantAttributes(element) {\n  const relevantAttrs = [\"loading\", \"decoding\", \"fetchpriority\", \"sizes\", \"srcset\", \"data-src\", \"data-lazy\"]\n  const attributes = {}\n\n  relevantAttrs.forEach((attr) => {\n    if (element.hasAttribute(attr)) {\n      attributes[attr] = element.getAttribute(attr)\n    }\n  })\n\n  return attributes\n}\n\n/**\n * Highlights the LCP element on the page\n * @returns {boolean} True if element was highlighted\n */\nexport function highlightLCPElement() {\n  if (!lcpElement) return false\n\n  // Remove existing highlights\n  removeLCPHighlight()\n\n  const highlight = document.createElement(\"div\")\n  highlight.id = \"bigscoots-lcp-highlight\"\n  highlight.style.cssText = `\n    position: absolute;\n    pointer-events: none;\n    z-index: 999999;\n    border: 3px solid #007aff;\n    background: rgba(0, 122, 255, 0.1);\n    box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.3), 0 0 20px rgba(0, 122, 255, 0.5);\n    animation: bigscoots-lcp-pulse 2s infinite;\n    border-radius: 4px;\n  `\n\n  if (!document.getElementById(\"bigscoots-lcp-highlight-styles\")) {\n    const style = document.createElement(\"style\")\n    style.id = \"bigscoots-lcp-highlight-styles\"\n    style.textContent = `\n      @keyframes bigscoots-lcp-pulse {\n        0% { box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.3), 0 0 20px rgba(0, 122, 255, 0.5); }\n        50% { box-shadow: 0 0 0 6px rgba(0, 122, 255, 0.5), 0 0 30px rgba(0, 122, 255, 0.8); }\n        100% { box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.3), 0 0 20px rgba(0, 122, 255, 0.5); }\n      }\n    `\n    document.head.appendChild(style)\n  }\n\n  const rect = lcpElement.getBoundingClientRect()\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft\n\n  highlight.style.top = rect.top + scrollTop - 3 + \"px\"\n  highlight.style.left = rect.left + scrollLeft - 3 + \"px\"\n  highlight.style.width = rect.width + 6 + \"px\"\n  highlight.style.height = rect.height + 6 + \"px\"\n\n  document.body.appendChild(highlight)\n\n  lcpElement.scrollIntoView({\n    behavior: \"smooth\",\n    block: \"center\",\n    inline: \"center\",\n  })\n\n  setTimeout(() => {\n    removeLCPHighlight()\n  }, 5000)\n\n  return true\n}\n\n/**\n * Removes LCP element highlight\n */\nfunction removeLCPHighlight() {\n  const existingHighlight = document.getElementById(\"bigscoots-lcp-highlight\")\n  if (existingHighlight) {\n    existingHighlight.remove()\n  }\n}\n\n/**\n * Gets the current LCP data\n * @returns {Object} Current LCP data\n */\nexport function getCurrentLCPData() {\n  return {\n    value: lcpValue,\n    element: lcpElementInfo,\n    rating: lcpValue < 2500 ? \"good\" : lcpValue < 4000 ? \"needs-improvement\" : \"poor\",\n  }\n}\n","import { safeSendMessage } from \"../../utils/messaging.js\"\n\n// Use a unique namespace to avoid conflicts\nconst INP_NAMESPACE = \"bigscoots_inp_\" + Date.now()\n\n// Initialize INP data with persistence\nfunction getINPData() {\n  if (!window[INP_NAMESPACE]) {\n    window[INP_NAMESPACE] = {\n      maxINP: 0,\n      interactions: new Map(),\n      inpEntries: [],\n      isInitialized: false,\n      lastSentValue: null,\n    }\n  }\n  return window[INP_NAMESPACE]\n}\n\n/**\n * Initializes INP (Interaction to Next Paint) monitoring\n */\nexport function initializeINPMonitoring() {\n  const inpData = getINPData()\n\n  // Prevent multiple initializations\n  if (inpData.isInitialized) {\n    console.log(\"INP monitoring already initialized, sending cached data\")\n    sendCurrentINPData()\n    return\n  }\n\n  if (!window.PerformanceObserver) {\n    initializeManualINPTracking()\n    return\n  }\n\n  if (!PerformanceObserver.supportedEntryTypes || !PerformanceObserver.supportedEntryTypes.includes(\"event\")) {\n    initializeManualINPTracking()\n    return\n  }\n\n  try {\n    function processEntry(entry) {\n      if (!entry.interactionId) return\n\n      const inpData = getINPData()\n      const interactionId = entry.interactionId\n      const duration = entry.duration\n\n      const existing = inpData.interactions.get(interactionId)\n      if (!existing || duration > existing) {\n        inpData.interactions.set(interactionId, duration)\n\n        // Capture element details for the interaction\n        let elementDetails = null\n        if (entry.target) {\n          elementDetails = captureElementDetails(entry.target)\n        }\n\n        const entryDetails = {\n          interactionId,\n          duration: Math.round(duration),\n          startTime: entry.startTime,\n          name: entry.name,\n          target: entry.target ? entry.target.tagName : \"unknown\",\n          timestamp: Date.now(),\n          element: elementDetails, // Add element details\n        }\n\n        if (duration > inpData.maxINP) {\n          inpData.maxINP = duration\n          inpData.inpEntries.unshift(entryDetails)\n          if (inpData.inpEntries.length > 10) {\n            inpData.inpEntries.pop()\n          }\n\n          const rating = duration < 200 ? \"good\" : duration < 500 ? \"needs-improvement\" : \"poor\"\n          const currentValue = Math.round(duration)\n\n          // Only send if value actually changed\n          if (inpData.lastSentValue !== currentValue) {\n            inpData.lastSentValue = currentValue\n\n            safeSendMessage({\n              action: \"updateINP\",\n              value: currentValue,\n              entries: [...inpData.inpEntries], // Send copy to avoid reference issues\n              rating: rating,\n              status: \"measured\",\n            })\n          }\n        }\n      }\n    }\n\n    const observer = new PerformanceObserver((list) => {\n      for (const entry of list.getEntries()) {\n        processEntry(entry)\n      }\n    })\n\n    observer.observe({\n      type: \"event\",\n      buffered: true,\n      durationThreshold: 0,\n    })\n\n    inpData.isInitialized = true\n\n    // Send initial state after longer delay to allow for existing interactions\n    setTimeout(() => {\n      sendCurrentINPData()\n    }, 3000) // Increased delay\n  } catch (error) {\n    console.log(\"PerformanceObserver failed, falling back to manual tracking\")\n    initializeManualINPTracking()\n  }\n}\n\n/**\n * Initializes manual INP tracking as fallback\n */\nfunction initializeManualINPTracking() {\n  const inpData = getINPData()\n\n  if (inpData.isInitialized) {\n    sendCurrentINPData()\n    return\n  }\n\n  const interactionEvents = [\"pointerdown\", \"click\", \"keydown\"]\n\n  interactionEvents.forEach((eventType) => {\n    document.addEventListener(\n      eventType,\n      (event) => {\n        const startTime = performance.now()\n\n        requestAnimationFrame(() => {\n          const duration = performance.now() - startTime\n          const inpData = getINPData()\n\n          if (duration > inpData.maxINP) {\n            inpData.maxINP = duration\n\n            const entryDetails = {\n              duration: Math.round(duration),\n              startTime,\n              name: eventType,\n              target: event.target ? event.target.tagName : \"unknown\",\n              method: \"manual\",\n              timestamp: Date.now(),\n            }\n\n            inpData.inpEntries.unshift(entryDetails)\n            if (inpData.inpEntries.length > 10) {\n              inpData.inpEntries.pop()\n            }\n\n            const rating = duration < 200 ? \"good\" : duration < 500 ? \"needs-improvement\" : \"poor\"\n            const currentValue = Math.round(duration)\n\n            // Only send if value actually changed\n            if (inpData.lastSentValue !== currentValue) {\n              inpData.lastSentValue = currentValue\n\n              safeSendMessage({\n                action: \"updateINP\",\n                value: currentValue,\n                entries: [...inpData.inpEntries],\n                rating: rating,\n                status: \"measured\",\n              })\n            }\n          }\n        })\n      },\n      { passive: true, capture: true },\n    )\n  })\n\n  inpData.isInitialized = true\n\n  setTimeout(() => {\n    sendCurrentINPData()\n  }, 3000)\n}\n\n/**\n * Sends current INP data without resetting\n */\nfunction sendCurrentINPData() {\n  const inpData = getINPData()\n\n  const currentData = {\n    action: \"updateINP\",\n    value: inpData.maxINP > 0 ? Math.round(inpData.maxINP) : null,\n    entries: [...inpData.inpEntries],\n    rating: inpData.maxINP < 200 ? \"good\" : inpData.maxINP < 500 ? \"needs-improvement\" : \"poor\",\n    status: inpData.maxINP > 0 ? \"measured\" : \"waiting\",\n  }\n\n  safeSendMessage(currentData)\n}\n\n/**\n * Gets the current INP data\n * @returns {Object} Current INP data\n */\nexport function getCurrentINPData() {\n  const inpData = getINPData()\n\n  return {\n    value: inpData.maxINP > 0 ? Math.round(inpData.maxINP) : null,\n    entries: [...inpData.inpEntries],\n    rating: inpData.maxINP < 200 ? \"good\" : inpData.maxINP < 500 ? \"needs-improvement\" : \"poor\",\n    status: inpData.maxINP > 0 ? \"measured\" : \"waiting\",\n  }\n}\n\n/**\n * Captures detailed information about an element\n * @param {Element} element - The DOM element to analyze\n * @returns {Object} Element details\n */\nfunction captureElementDetails(element) {\n  if (!element) return null\n\n  try {\n    const rect = element.getBoundingClientRect()\n    const computedStyle = window.getComputedStyle(element)\n\n    return {\n      tagName: element.tagName,\n      id: element.id || null,\n      classList: element.classList ? Array.from(element.classList) : [],\n      dimensions: {\n        width: Math.round(rect.width),\n        height: Math.round(rect.height),\n      },\n      position: {\n        left: Math.round(rect.left),\n        top: Math.round(rect.top),\n      },\n      selector: generateSelector(element),\n      textContent: element.textContent ? element.textContent.trim().substring(0, 100) : null,\n    }\n  } catch (error) {\n    console.log(\"Error capturing element details:\", error)\n    return {\n      tagName: element.tagName || \"UNKNOWN\",\n      error: \"Could not capture details\",\n    }\n  }\n}\n\n/**\n * Generates a CSS selector for an element\n * @param {Element} element - The DOM element\n * @returns {string} CSS selector\n */\nfunction generateSelector(element) {\n  if (!element) return \"\"\n\n  try {\n    if (element.id) {\n      return `#${element.id}`\n    }\n\n    let selector = element.tagName.toLowerCase()\n\n    if (element.classList.length > 0) {\n      selector += \".\" + Array.from(element.classList).join(\".\")\n    }\n\n    // Add nth-child if needed for uniqueness\n    const parent = element.parentElement\n    if (parent) {\n      const siblings = Array.from(parent.children).filter((child) => child.tagName === element.tagName)\n      if (siblings.length > 1) {\n        const index = siblings.indexOf(element) + 1\n        selector += `:nth-child(${index})`\n      }\n    }\n\n    return selector\n  } catch (error) {\n    return element.tagName ? element.tagName.toLowerCase() : \"unknown\"\n  }\n}\n","import { safeSendMessage } from \"../../utils/messaging.js\"\n\n// Performance metrics storage\nconst performanceMetrics = {}\n\n/**\n * Initializes additional performance metrics monitoring\n */\nexport function initializeAdditionalMetrics() {\n  const navigation = performance.getEntriesByType(\"navigation\")[0]\n  if (navigation) {\n    performanceMetrics.ttfb = Math.round(navigation.responseStart - navigation.requestStart)\n    performanceMetrics.domLoad = Math.round(navigation.domContentLoadedEventEnd - navigation.navigationStart)\n    performanceMetrics.pageLoad = Math.round(navigation.loadEventEnd - navigation.navigationStart)\n  }\n\n  try {\n    const observer = new PerformanceObserver((entryList) => {\n      for (const entry of entryList.getEntries()) {\n        if (entry.name === \"first-contentful-paint\") {\n          performanceMetrics.fcp = Math.round(entry.startTime)\n          safeSendMessage({\n            action: \"updateAdditionalMetrics\",\n            metrics: performanceMetrics,\n          })\n        }\n      }\n    })\n\n    observer.observe({ type: \"paint\", buffered: true })\n  } catch (error) {\n    // Silent error handling\n  }\n\n  setTimeout(() => {\n    safeSendMessage({\n      action: \"updateAdditionalMetrics\",\n      metrics: performanceMetrics,\n    })\n  }, 1500)\n}\n\n/**\n * Gets the current additional metrics data\n * @returns {Object} Current additional metrics data\n */\nexport function getCurrentAdditionalMetrics() {\n  return performanceMetrics\n}\n","/**\n * Checks if an image is above the fold (visible in the viewport)\n * @param {HTMLImageElement} img - The image element to check\n * @returns {boolean} True if the image is above the fold\n */\nexport function isImageAboveFold(img) {\n  const rect = img.getBoundingClientRect()\n  const viewportHeight = window.innerHeight || document.documentElement.clientHeight\n  return rect.top < viewportHeight && rect.bottom > 0\n}\n\n/**\n * Gets the dimensions of an image\n * @param {HTMLImageElement} img - The image element\n * @returns {Object} Object containing natural and displayed dimensions\n */\nexport function getImageDimensions(img) {\n  return {\n    natural: {\n      width: img.naturalWidth || 0,\n      height: img.naturalHeight || 0,\n    },\n    displayed: {\n      width: img.offsetWidth || 0,\n      height: img.offsetHeight || 0,\n    },\n  }\n}\n\n/**\n * Determines if an image is on the critical rendering path\n * @param {HTMLImageElement} img - The image element\n * @param {Object} dimensions - The image dimensions\n * @returns {boolean} True if the image is on the critical path\n */\nexport function isCriticalPathImage(img, dimensions) {\n  const rect = img.getBoundingClientRect()\n  const viewportHeight = window.innerHeight || document.documentElement.clientHeight\n  const viewportWidth = window.innerWidth || document.documentElement.clientWidth\n\n  const isAboveFold = rect.top < viewportHeight && rect.bottom > 0\n  const isSignificantSize = dimensions.displayed.width >= 150 || dimensions.displayed.height >= 150\n  const takesViewportSpace =\n    dimensions.displayed.width * dimensions.displayed.height > viewportWidth * viewportHeight * 0.02\n\n  const isLikelyHero =\n    rect.top < viewportHeight * 0.6 &&\n    (dimensions.displayed.width > viewportWidth * 0.3 || dimensions.displayed.height > viewportHeight * 0.3)\n\n  const isLikelyLogo =\n    img.alt &&\n    (img.alt.toLowerCase().includes(\"logo\") ||\n      img.alt.toLowerCase().includes(\"brand\") ||\n      img.className.toLowerCase().includes(\"logo\") ||\n      img.id.toLowerCase().includes(\"logo\"))\n\n  return isAboveFold && (isSignificantSize || isLikelyHero || isLikelyLogo) && takesViewportSpace\n}\n\n/**\n * Gets the format of an image from its URL\n * @param {string} url - The image URL\n * @returns {string} The image format\n */\nexport function getImageFormat(url) {\n  const extension = url.split(\".\").pop().split(\"?\")[0].toLowerCase()\n  const formatMap = {\n    jpg: \"JPEG\",\n    jpeg: \"JPEG\",\n    png: \"PNG\",\n    gif: \"GIF\",\n    webp: \"WebP\",\n    avif: \"AVIF\",\n    svg: \"SVG\",\n  }\n  return formatMap[extension] || \"Unknown\"\n}\n\n/**\n * Analyzes image optimization issues\n * @param {HTMLImageElement} img - The image element\n * @param {Object} dimensions - The image dimensions\n * @returns {Array} Array of optimization issues\n */\nexport function analyzeImageOptimization(img, dimensions) {\n  const issues = []\n  const { natural, displayed } = dimensions\n\n  if (natural.width > displayed.width * 2 || natural.height > displayed.height * 2) {\n    const wastedPixels = natural.width * natural.height - displayed.width * displayed.height\n    issues.push({\n      type: \"oversized\",\n      severity: \"high\",\n      message: `Image is ${Math.round(wastedPixels / 1000)}K pixels larger than needed`,\n    })\n  }\n\n  const format = getImageFormat(img.src)\n  if ([\"JPEG\", \"PNG\"].includes(format)) {\n    issues.push({\n      type: \"format\",\n      severity: \"low\",\n      message: `Consider modern formats like WebP or AVIF instead of ${format}`,\n    })\n  }\n\n  if (isCriticalPathImage(img, dimensions) && img.getAttribute(\"loading\") === \"lazy\") {\n    issues.push({\n      type: \"loading\",\n      severity: \"high\",\n      message: \"Critical image should not use lazy loading\",\n    })\n  }\n\n  return issues\n}\n","import {\n  getImageDimensions,\n  isImageAboveFold,\n  isCriticalPathImage,\n  getImageFormat,\n  analyzeImageOptimization,\n} from \"../../utils/dom-helpers.js\"\n\n/**\n * Gets all preloaded images on the page\n * @returns {Promise<Array>} Array of preloaded image data\n */\nexport function getPreloadedImages() {\n  const uniqueImages = new Map()\n\n  // Get performance entries for images\n  const imageEntries = performance.getEntriesByType(\"resource\").filter((entry) => {\n    return entry.initiatorType === \"img\" || entry.name.match(/\\.(jpg|jpeg|png|gif|webp|avif|svg)(\\?.*)?$/i)\n  })\n\n  document.querySelectorAll('link[rel=\"preload\"][as=\"image\"]').forEach((el) => {\n    uniqueImages.set(el.href, {\n      url: el.href,\n      fetchpriority: el.getAttribute(\"fetchpriority\") || null,\n      type: \"preload\",\n    })\n  })\n\n  document.querySelectorAll(\"img[data-perfmatters-preload]\").forEach((el) => {\n    if (!uniqueImages.has(el.src)) {\n      uniqueImages.set(el.src, {\n        url: el.src,\n        fetchpriority: el.getAttribute(\"fetchpriority\") || null,\n        type: \"perfmatters\",\n      })\n    }\n  })\n\n  document.querySelectorAll('img[loading=\"eager\"]').forEach((el) => {\n    if (!uniqueImages.has(el.src)) {\n      uniqueImages.set(el.src, {\n        url: el.src,\n        fetchpriority: el.getAttribute(\"fetchpriority\") || null,\n        type: \"eager\",\n      })\n    }\n  })\n\n  return Promise.resolve(\n    Array.from(uniqueImages.values()).map((resource) => {\n      const imgElement = document.querySelector(`img[src=\"${resource.url}\"]`)\n\n      if (imgElement) {\n        const dimensions = getImageDimensions(imgElement)\n        const aboveFold = isImageAboveFold(imgElement)\n        const isCritical = isCriticalPathImage(imgElement, dimensions)\n        const format = getImageFormat(resource.url)\n        const issues = analyzeImageOptimization(imgElement, dimensions)\n\n        return {\n          ...resource,\n          dimensions,\n          aboveFold,\n          isCritical,\n          format,\n          issues,\n          loading: imgElement.getAttribute(\"loading\") || \"auto\",\n          decoding: imgElement.getAttribute(\"decoding\") || \"auto\",\n          fetchpriority: imgElement.getAttribute(\"fetchpriority\") || null,\n        }\n      }\n\n      return {\n        ...resource,\n        aboveFold: false,\n        isCritical: false,\n        format: getImageFormat(resource.url),\n        issues: [{ type: \"missing\", severity: \"low\", message: \"Image not found in DOM\" }],\n      }\n    }),\n  )\n}\n\n/**\n * Highlights an image on the page\n * @param {string} imageUrl - The URL of the image to highlight\n * @returns {boolean} True if image was found and highlighted\n */\nexport function highlightImageOnPage(imageUrl) {\n  removeImageHighlights()\n\n  const images = document.querySelectorAll(\"img\")\n  let targetImage = null\n\n  for (const img of images) {\n    if (img.src === imageUrl || img.currentSrc === imageUrl) {\n      targetImage = img\n      break\n    }\n  }\n\n  if (!targetImage) {\n    const allElements = document.querySelectorAll(\"*\")\n    for (const element of allElements) {\n      const computedStyle = window.getComputedStyle(element)\n      const backgroundImage = computedStyle.backgroundImage\n      if (backgroundImage && backgroundImage.includes(imageUrl)) {\n        targetImage = element\n        break\n      }\n    }\n  }\n\n  if (targetImage) {\n    const highlight = document.createElement(\"div\")\n    highlight.id = \"bigscoots-image-highlight\"\n    highlight.style.cssText = `\n      position: absolute;\n      pointer-events: none;\n      z-index: 999999;\n      border: 3px solid #ff4444;\n      background: rgba(255, 68, 68, 0.1);\n      box-shadow: 0 0 0 2px rgba(255, 68, 68, 0.3), 0 0 20px rgba(255, 68, 68, 0.5);\n      animation: bigscoots-pulse 2s infinite;\n      border-radius: 4px;\n    `\n\n    if (!document.getElementById(\"bigscoots-highlight-styles\")) {\n      const style = document.createElement(\"style\")\n      style.id = \"bigscoots-highlight-styles\"\n      style.textContent = `\n        @keyframes bigscoots-pulse {\n          0% { box-shadow: 0 0 0 2px rgba(255, 68, 68, 0.3), 0 0 20px rgba(255, 68, 68, 0.5); }\n          50% { box-shadow: 0 0 0 6px rgba(255, 68, 68, 0.5), 0 0 30px rgba(255, 68, 68, 0.8); }\n          100% { box-shadow: 0 0 0 2px rgba(255, 68, 68, 0.3), 0 0 20px rgba(255, 68, 68, 0.5); }\n        }\n      `\n      document.head.appendChild(style)\n    }\n\n    const rect = targetImage.getBoundingClientRect()\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft\n\n    highlight.style.top = rect.top + scrollTop - 3 + \"px\"\n    highlight.style.left = rect.left + scrollLeft - 3 + \"px\"\n    highlight.style.width = rect.width + 6 + \"px\"\n    highlight.style.height = rect.height + 6 + \"px\"\n\n    document.body.appendChild(highlight)\n\n    targetImage.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"center\",\n      inline: \"center\",\n    })\n\n    setTimeout(() => {\n      removeImageHighlights()\n    }, 5000)\n\n    return true\n  }\n\n  return false\n}\n\n/**\n * Removes image highlights from the page\n */\nfunction removeImageHighlights() {\n  const existingHighlight = document.getElementById(\"bigscoots-image-highlight\")\n  if (existingHighlight) {\n    existingHighlight.remove()\n  }\n}\n","import { formatFileSize } from \"../../utils/formatters.js\"\n\n/**\n * Gets all loaded and preloaded fonts on the page\n * @returns {Promise<Array>} Array of font data\n */\nexport function getLoadedAndPreloadedFonts() {\n  return new Promise((resolve) => {\n    const fontResources = performance.getEntriesByType(\"resource\").filter((entry) => {\n      const loadedWithinThreeSeconds = entry.startTime < 3000\n      const isFontResource =\n        entry.initiatorType === \"css\" &&\n        (entry.name.includes(\"/fonts/\") || entry.name.match(/\\.(woff2?|ttf|otf|eot)($|\\?)/i))\n      return loadedWithinThreeSeconds && isFontResource\n    })\n\n    const preloadedFonts = Array.from(document.querySelectorAll('link[rel=\"preload\"][as=\"font\"]')).map((el) => ({\n      url: el.href,\n      fetchpriority: el.getAttribute(\"fetchpriority\") || null,\n      type: el.getAttribute(\"type\") || null,\n      crossorigin: el.getAttribute(\"crossorigin\") || null,\n    }))\n\n    const uniqueFonts = new Map()\n\n    fontResources.forEach((resource) => {\n      const preloadedFont = preloadedFonts.find((pf) => pf.url === resource.name)\n\n      uniqueFonts.set(resource.name, {\n        url: resource.name,\n        loadTime: Math.round(resource.startTime),\n        preloaded: !!preloadedFont,\n        fetchpriority: preloadedFont?.fetchpriority || null,\n        type: getFontType(resource.name),\n        crossorigin: preloadedFont?.crossorigin || null,\n        fileSize: resource.transferSize || null,\n        fileSizeFormatted: resource.transferSize ? formatFileSize(resource.transferSize) : null,\n      })\n    })\n\n    preloadedFonts.forEach((pf) => {\n      if (!uniqueFonts.has(pf.url)) {\n        uniqueFonts.set(pf.url, {\n          url: pf.url,\n          loadTime: 0,\n          preloaded: true,\n          fetchpriority: pf.fetchpriority,\n          type: getFontType(pf.url),\n          crossorigin: pf.crossorigin,\n          fileSize: null,\n          fileSizeFormatted: null,\n        })\n      }\n    })\n\n    const allFonts = Array.from(uniqueFonts.values()).sort((a, b) => a.loadTime - b.loadTime)\n    resolve(allFonts)\n  })\n}\n\n/**\n * Gets the font type from a URL\n * @param {string} url - The font URL\n * @returns {string} The font type\n */\nfunction getFontType(url) {\n  const extension = url.split(\".\").pop().split(\"?\")[0].toLowerCase()\n  const typeMap = {\n    woff2: \"WOFF2\",\n    woff: \"WOFF\",\n    ttf: \"TTF\",\n    otf: \"OTF\",\n    eot: \"EOT\",\n    svg: \"SVG\",\n  }\n  return typeMap[extension] || \"Unknown\"\n}\n","/**\n * PageSpeed Insights API analyzer - Enhanced for all Core Web Vitals\n */\n\nimport { safeSendMessage } from \"../../utils/messaging.js\"\n\n// PSI API configuration\nconst PSI_API_BASE_URL = \"https://psi-api-worker-staging.cache-warmer-getjoinus.workers.dev/\"\n\n/**\n * Fetches PageSpeed Insights data for the current page\n * @returns {Promise<Object|null>} PSI data or null if failed\n */\nexport async function fetchPSIData() {\n  try {\n    const currentUrl = window.location.href\n    const apiUrl = `${PSI_API_BASE_URL}?url=${encodeURIComponent(currentUrl)}`\n\n    console.log(\"Fetching PSI data for:\", currentUrl)\n\n    const response = await fetch(apiUrl)\n\n    if (!response.ok) {\n      throw new Error(`PSI API request failed: ${response.status} ${response.statusText}`)\n    }\n\n    const data = await response.json()\n\n    // Handle API-level errors (when API returns error in response body)\n    if (data.status === \"failed\" || data.status === \"error\") {\n      const errorMessage = data.message || \"Unknown error occurred\"\n      const errorDetails = data.error ? ` (${data.error.type}: ${data.error.code})` : \"\"\n      throw new Error(`${errorMessage}${errorDetails}`)\n    }\n\n    if (data.status !== \"success\") {\n      throw new Error(`PSI API error: ${data.message || \"Unknown error\"}`)\n    }\n\n    console.log(\"PSI data fetched successfully:\", data)\n    return data\n  } catch (error) {\n    console.error(\"Error fetching PSI data:\", error)\n    // Re-throw with a more user-friendly message if it's a generic error\n    if (error.message.includes(\"[object Object]\")) {\n      throw new Error(\"Failed to analyze page with PageSpeed Insights. Please try again.\")\n    }\n    throw error\n  }\n}\n\n/**\n * Extracts all Core Web Vitals field data from PSI response\n * @param {Object} psiData - PSI API response data\n * @returns {Object|null} All CWV field data or null if not available\n */\nexport function extractAllFieldData(psiData) {\n  try {\n    if (!psiData || !psiData.data || !psiData.data.loadingExperience) {\n      return null\n    }\n\n    const loadingExperience = psiData.data.loadingExperience\n    const metrics = loadingExperience.metrics\n\n    if (!metrics) {\n      return null\n    }\n\n    const fieldData = {\n      id: loadingExperience.id,\n      overallCategory: loadingExperience.overall_category,\n    }\n\n    // Extract CLS data\n    if (metrics.CUMULATIVE_LAYOUT_SHIFT_SCORE) {\n      fieldData.cls = {\n        percentile: metrics.CUMULATIVE_LAYOUT_SHIFT_SCORE.percentile,\n        category: metrics.CUMULATIVE_LAYOUT_SHIFT_SCORE.category,\n        distributions: metrics.CUMULATIVE_LAYOUT_SHIFT_SCORE.distributions,\n        // Convert percentile to actual CLS value (percentile is in hundredths)\n        value: metrics.CUMULATIVE_LAYOUT_SHIFT_SCORE.percentile / 100,\n      }\n    }\n\n    // Extract LCP data\n    if (metrics.LARGEST_CONTENTFUL_PAINT_MS) {\n      fieldData.lcp = {\n        percentile: metrics.LARGEST_CONTENTFUL_PAINT_MS.percentile,\n        category: metrics.LARGEST_CONTENTFUL_PAINT_MS.category,\n        distributions: metrics.LARGEST_CONTENTFUL_PAINT_MS.distributions,\n        value: metrics.LARGEST_CONTENTFUL_PAINT_MS.percentile, // Already in ms\n      }\n    }\n\n    // Extract INP data\n    if (metrics.INTERACTION_TO_NEXT_PAINT) {\n      fieldData.inp = {\n        percentile: metrics.INTERACTION_TO_NEXT_PAINT.percentile,\n        category: metrics.INTERACTION_TO_NEXT_PAINT.category,\n        distributions: metrics.INTERACTION_TO_NEXT_PAINT.distributions,\n        value: metrics.INTERACTION_TO_NEXT_PAINT.percentile, // Already in ms\n      }\n    }\n\n    // Extract TTFB data\n    if (metrics.EXPERIMENTAL_TIME_TO_FIRST_BYTE) {\n      fieldData.ttfb = {\n        percentile: metrics.EXPERIMENTAL_TIME_TO_FIRST_BYTE.percentile,\n        category: metrics.EXPERIMENTAL_TIME_TO_FIRST_BYTE.category,\n        distributions: metrics.EXPERIMENTAL_TIME_TO_FIRST_BYTE.distributions,\n        value: metrics.EXPERIMENTAL_TIME_TO_FIRST_BYTE.percentile, // Already in ms\n      }\n    }\n\n    // Extract FCP data (bonus metric)\n    if (metrics.FIRST_CONTENTFUL_PAINT_MS) {\n      fieldData.fcp = {\n        percentile: metrics.FIRST_CONTENTFUL_PAINT_MS.percentile,\n        category: metrics.FIRST_CONTENTFUL_PAINT_MS.category,\n        distributions: metrics.FIRST_CONTENTFUL_PAINT_MS.distributions,\n        value: metrics.FIRST_CONTENTFUL_PAINT_MS.percentile, // Already in ms\n      }\n    }\n\n    return fieldData\n  } catch (error) {\n    console.error(\"Error extracting field data:\", error)\n    return null\n  }\n}\n\n/**\n * Extracts Lab data from PSI response - Only CLS and LCP (TTFB not available in lab)\n * @param {Object} psiData - PSI API response data\n * @returns {Object|null} Lab data or null if not available\n */\nexport function extractLabData(psiData) {\n  try {\n    console.log(\"🧪 [PSI Lab] Attempting to extract lab data from:\", psiData)\n\n    // Check multiple possible paths for lab data in PSI response\n    let metrics = null\n\n    // Path 1: Direct metrics in data\n    if (psiData?.data?.metrics) {\n      metrics = psiData.data.metrics\n      console.log(\"🧪 [PSI Lab] Found metrics in data.metrics:\", metrics)\n    }\n\n    // Path 2: Lighthouse result audits (standard Lighthouse structure)\n    else if (psiData?.data?.lighthouseResult?.audits) {\n      const audits = psiData.data.lighthouseResult.audits\n      console.log(\"🧪 [PSI Lab] Found lighthouse audits:\", Object.keys(audits))\n\n      // Convert audits to metrics format\n      metrics = {}\n      if (audits[\"cumulative-layout-shift\"]) {\n        metrics.CLS = audits[\"cumulative-layout-shift\"]\n      }\n      if (audits[\"largest-contentful-paint\"]) {\n        metrics.LCP = audits[\"largest-contentful-paint\"]\n      }\n      // Note: TTFB is not available in lab data as it's a server-side metric\n    }\n\n    // Path 3: Check if metrics are nested elsewhere\n    else if (psiData?.data?.labData) {\n      metrics = psiData.data.labData\n      console.log(\"🧪 [PSI Lab] Found metrics in data.labData:\", metrics)\n    }\n\n    if (!metrics) {\n      console.log(\"🧪 [PSI Lab] No lab metrics found in PSI response\")\n      console.log(\"🧪 [PSI Lab] Available data keys:\", Object.keys(psiData?.data || {}))\n      return null\n    }\n\n    const labData = {}\n\n    // Extract CLS lab data\n    if (metrics.CLS) {\n      labData.cls = {\n        numericValue: metrics.CLS.numericValue,\n        displayValue: metrics.CLS.displayValue,\n        score: metrics.CLS.score,\n        value: metrics.CLS.numericValue, // Use numericValue as the main value\n      }\n      console.log(\"🧪 [PSI Lab] Extracted CLS lab data:\", labData.cls)\n    }\n\n    // Extract LCP lab data\n    if (metrics.LCP) {\n      labData.lcp = {\n        numericValue: metrics.LCP.numericValue,\n        displayValue: metrics.LCP.displayValue,\n        score: metrics.LCP.score,\n        value: metrics.LCP.numericValue, // Use numericValue as the main value\n      }\n      console.log(\"🧪 [PSI Lab] Extracted LCP lab data:\", labData.lcp)\n    }\n\n    // Note: TTFB is intentionally excluded from lab data as it's not available in Lighthouse lab environment\n\n    console.log(\"🧪 [PSI Lab] Final extracted lab data (CLS & LCP only):\", labData)\n    return Object.keys(labData).length > 0 ? labData : null\n  } catch (error) {\n    console.error(\"🧪 [PSI Lab] Error extracting lab data:\", error)\n    return null\n  }\n}\n\n/**\n * Analyzes PSI data and sends to popup - Enhanced for all CWV with proper error handling\n * @returns {Promise<boolean>} Success status\n */\nexport async function analyzePSIData() {\n  try {\n    // Show loading state\n    safeSendMessage({\n      action: \"updatePSIStatus\",\n      status: \"loading\",\n      message: \"Fetching PageSpeed Insights data...\",\n    })\n\n    const psiData = await fetchPSIData()\n\n    console.log(\"🔍 [PSI API] RAW API Response:\", JSON.stringify(psiData, null, 2))\n\n    // Extract all field data and lab data\n    const allFieldData = extractAllFieldData(psiData)\n    const labData = extractLabData(psiData)\n\n    console.log(\"🌍 [PSI] Extracted field data:\", allFieldData)\n    console.log(\"🧪 [PSI] Extracted lab data:\", labData)\n\n    // Store PSI data in background for persistence\n    safeSendMessage({\n      action: \"storePSIResults\",\n      psiData: {\n        allFieldData: allFieldData,\n        labData: labData,\n        timestamp: Date.now(),\n        url: window.location.href,\n        rawData: psiData.data, // Store raw data for future use\n        fromCache: psiData.fromCache, // Store cache status\n      },\n    })\n\n    // Send complete PSI data for insights processing\n    safeSendMessage({\n      action: \"completePSIResults\",\n      psiData: psiData,\n    })\n\n    // Send individual field metric updates\n    if (allFieldData) {\n      // Update CLS\n      if (allFieldData.cls) {\n        safeSendMessage({\n          action: \"updatePSICLS\",\n          fieldData: allFieldData.cls,\n          status: \"success\",\n        })\n      }\n\n      // Update LCP\n      if (allFieldData.lcp) {\n        safeSendMessage({\n          action: \"updatePSILCP\",\n          fieldData: allFieldData.lcp,\n          status: \"success\",\n        })\n      }\n\n      // Update INP\n      if (allFieldData.inp) {\n        safeSendMessage({\n          action: \"updatePSIINP\",\n          fieldData: allFieldData.inp,\n          status: \"success\",\n        })\n      }\n\n      // Update TTFB\n      if (allFieldData.ttfb) {\n        safeSendMessage({\n          action: \"updatePSITTFB\",\n          fieldData: allFieldData.ttfb,\n          status: \"success\",\n        })\n      }\n    }\n\n    // Send individual lab metric updates (only CLS and LCP available in lab)\n    if (labData) {\n      console.log(\"🧪 [PSI] Sending lab data updates:\", labData)\n\n      // Update CLS Lab\n      if (labData.cls) {\n        console.log(\"🧪 [PSI] Sending CLS lab update:\", labData.cls)\n        safeSendMessage({\n          action: \"updatePSILabCLS\",\n          labData: labData.cls,\n          status: \"success\",\n        })\n      }\n\n      // Update LCP Lab\n      if (labData.lcp) {\n        console.log(\"🧪 [PSI] Sending LCP lab update:\", labData.lcp)\n        safeSendMessage({\n          action: \"updatePSILabLCP\",\n          labData: labData.lcp,\n          status: \"success\",\n        })\n      }\n\n      // Note: TTFB lab data is not sent as it's not available in Lighthouse lab environment\n    } else {\n      console.log(\"🧪 [PSI] No lab data available to send\")\n    }\n\n    // Send success status LAST to ensure button updates correctly\n    safeSendMessage({\n      action: \"updatePSIStatus\",\n      status: \"success\",\n      message: \"PSI data loaded successfully\",\n    })\n\n    console.log(\"✅ [PSI] Analysis completed successfully\")\n    return true\n  } catch (error) {\n    console.error(\"Error analyzing PSI data:\", error)\n\n    // Extract user-friendly error message\n    let userMessage = \"Analysis failed. Please try again.\"\n    if (error.message) {\n      // Check for specific error types\n      if (error.message.includes(\"hosting requirements\")) {\n        userMessage = \"This site doesn't meet hosting requirements for analysis.\"\n      } else if (error.message.includes(\"403\")) {\n        userMessage = \"Access denied. Site may not be eligible for analysis.\"\n      } else if (error.message.includes(\"404\")) {\n        userMessage = \"Page not found or not accessible for analysis.\"\n      } else if (error.message.includes(\"500\")) {\n        userMessage = \"Server error occurred. Please try again later.\"\n      } else if (error.message.includes(\"network\") || error.message.includes(\"fetch\")) {\n        userMessage = \"Network error. Please check your connection and try again.\"\n      } else {\n        // Use the error message if it's user-friendly\n        userMessage = error.message\n      }\n    }\n\n    safeSendMessage({\n      action: \"updatePSIStatus\",\n      status: \"error\",\n      message: `Error analyzing PSI data: ${error.message}`,\n      userMessage: userMessage,\n    })\n    return false\n  }\n}\n","// Import performance monitoring modules\nimport { initializeCLSMonitoring, getCurrentCLSData, highlightCLSElement } from \"./performance/cls-monitor.js\"\nimport { initializeLCPMonitoring, getCurrentLCPData, highlightLCPElement } from \"./performance/lcp-monitor.js\"\nimport { initializeINPMonitoring, getCurrentINPData } from \"./performance/inp-monitor.js\"\nimport { initializeAdditionalMetrics, getCurrentAdditionalMetrics } from \"./performance/additional-metrics.js\"\n\n// Import analyzer modules\nimport { getPreloadedImages, highlightImageOnPage } from \"./analyzers/image-analyzer.js\"\nimport { getLoadedAndPreloadedFonts } from \"./analyzers/font-analyzer.js\"\nimport { analyzePSIData } from \"./analyzers/psi-analyzer.js\"\n\n// Import utilities\nimport { safeSendMessage } from \"../utils/messaging.js\"\n\n// Declare chrome variable to avoid undeclared variable error\n\nconsole.log(\"=== CONTENT SCRIPT STARTING ===\")\nconsole.log(\"URL:\", window.location.href)\nconsole.log(\"Domain:\", window.location.hostname)\n\n/**\n * Checks if the extension should run on the current domain\n * @returns {boolean} True if the extension should run\n */\nfunction shouldRunOnDomain() {\n  const excludedDomains = [\"portal.bigscoots.com\", \"wpo-admin.bigscoots.com\", \"wpo.bigscoots.com\"]\n\n  // Check exact domain matches\n  if (excludedDomains.some((domain) => window.location.hostname === domain)) {\n    console.log(\"Domain excluded:\", window.location.hostname)\n    return false\n  }\n\n  // Check if domain ends with bigscoots-wpo.com\n  if (window.location.hostname.endsWith(\"bigscoots-wpo.com\")) {\n    console.log(\"BigScoots WPO domain excluded:\", window.location.hostname)\n    return false\n  }\n\n  console.log(\"Domain allowed:\", window.location.hostname)\n  return true\n}\n\n/**\n * Gets headers from the current page\n * @returns {Promise<Object>} Headers object\n */\nfunction getHeaders() {\n  console.log(\"Fetching headers...\")\n  return fetch(window.location.href, {\n    method: \"GET\",\n    cache: \"no-store\",\n    credentials: \"include\",\n  })\n    .then((response) => {\n      console.log(\"Headers response received\")\n      const headers = {}\n      ;[\n        \"x-bigscoots-cache-status\",\n        \"cf-cache-status\",\n        \"x-hosted-by\",\n        \"x-bigscoots-cache-plan\",\n        \"content-encoding\",\n        \"x-bigscoots-cache-mode\",\n        \"x-ezoic-cdn\",\n        \"x-np-cfe\",\n      ].forEach((header) => {\n        headers[header] = response.headers.get(header) || \"N/A\"\n      })\n\n      headers[\"x-bigscoots-cache-mode (O2O)\"] = headers[\"x-bigscoots-cache-mode\"] !== \"N/A\" ? \"Enabled\" : \"Disabled\"\n      headers[\"x-np-cfe\"] = headers[\"x-np-cfe\"] !== \"N/A\" ? \"Nerdpress active\" : headers[\"x-np-cfe\"]\n\n      console.log(\"Headers processed:\", headers)\n      return headers\n    })\n    .catch((error) => {\n      console.error(\"Error fetching headers:\", error)\n      return {}\n    })\n}\n\n/**\n * Analyzes the page source code for various optimizations\n * @returns {Object} Source code analysis results\n */\nfunction analyzeSourceCode() {\n  console.log(\"Analyzing source code...\")\n  const html = document.documentElement.outerHTML\n  const perfmattersRUCSS = html.includes(\"data-pmdelayedstyle\") ? \"enabled\" : \"disabled\"\n  const perfmattersDelayJS = html.includes(\"pmdelayedscript\") ? \"enabled\" : \"disabled\"\n\n  const patterns = {\n    gtm: /GTM-\\w+/g,\n    ua: /UA-\\d+-\\d+/g,\n    ga4: /G-[A-Z0-9]{9,}/g,\n    ga: /GA-[A-Z0-9]+/g,\n  }\n\n  const matches = Object.fromEntries(\n    Object.entries(patterns).map(([key, pattern]) => [key, [...new Set(html.match(pattern) || [])]]),\n  )\n\n  const result = {\n    perfmattersRUCSS,\n    perfmattersDelayJS,\n    gtm: matches.gtm.join(\", \"),\n    ua: matches.ua.join(\", \"),\n    ga4: matches.ga4.join(\", \"),\n    ga: matches.ga.join(\", \"),\n    adProvider: detectAdProvider(),\n  }\n\n  console.log(\"Source code analysis complete:\", result)\n  return result\n}\n\n/**\n * Detects ad providers on the page\n * @returns {string} Detected ad provider or \"None detected\"\n */\nfunction detectAdProvider() {\n  const html = document.documentElement.outerHTML\n  const scripts = Array.from(document.scripts).map((script) => script.src)\n\n  const adProviders = {\n    Mediavine: {\n      domains: [\"scripts.mediavine.com\", \"ads.mediavine.com\"],\n      patterns: [\"window.mediavineDomain\", \"__mediavineMachine\"],\n      enabled: false,\n    },\n    \"AdThrive/Raptive\": {\n      domains: [\"ads.adthrive.com\", \"cdn.adthrive.com\"],\n      patterns: [\"window.adthrive\", \"adthrive.config\"],\n      enabled: false,\n    },\n    Ezoic: {\n      domains: [\"www.ezojs.com\", \"ezoic.com\", \"ezoic.net\"],\n      patterns: [\"ezstandalone\", \"ez_ad_units\"],\n      enabled: false,\n    },\n    \"Google AdSense\": {\n      domains: [\"pagead2.googlesyndication.com\", \"adsbygoogle\"],\n      patterns: [\"adsbygoogle.push\", \"(adsbygoogle\"],\n      enabled: false,\n    },\n  }\n\n  Object.keys(adProviders).forEach((provider) => {\n    const hasDomain = adProviders[provider].domains.some((domain) => scripts.some((src) => src && src.includes(domain)))\n    const hasPattern = adProviders[provider].patterns.some((pattern) => html.includes(pattern))\n    if (hasDomain || hasPattern) {\n      adProviders[provider].enabled = true\n    }\n  })\n\n  const detectedProviders = Object.keys(adProviders).filter((provider) => adProviders[provider].enabled)\n  return detectedProviders.join(\", \") || \"None detected\"\n}\n\n/**\n * Highlights the INP element on the page\n * @returns {boolean} Success status\n */\nfunction highlightINPElement() {\n  console.log(\"highlightINPElement called\")\n\n  try {\n    const inpData = getCurrentINPData()\n    console.log(\"Current INP data:\", inpData)\n\n    if (!inpData.entries || inpData.entries.length === 0) {\n      console.log(\"No INP entries available for highlighting\")\n      return false\n    }\n\n    // Get the latest (highest INP) entry\n    const latestEntry = inpData.entries[0]\n    console.log(\"Latest INP entry:\", latestEntry)\n\n    if (!latestEntry.element || !latestEntry.element.selector) {\n      console.log(\"No element selector available for highlighting\")\n      return false\n    }\n\n    // Try to find the element using the selector\n    let targetElement = null\n    try {\n      targetElement = document.querySelector(latestEntry.element.selector)\n    } catch (error) {\n      console.log(\"Error with selector, trying alternative methods:\", error)\n    }\n\n    // Fallback: try to find by ID or class\n    if (!targetElement && latestEntry.element.id) {\n      targetElement = document.getElementById(latestEntry.element.id)\n    }\n\n    if (!targetElement && latestEntry.element.classList && latestEntry.element.classList.length > 0) {\n      targetElement = document.querySelector(`.${latestEntry.element.classList[0]}`)\n    }\n\n    if (!targetElement) {\n      console.log(\"Could not find INP element to highlight\")\n      return false\n    }\n\n    console.log(\"Found INP element to highlight:\", targetElement)\n\n    // Create highlight overlay\n    const highlight = document.createElement(\"div\")\n    highlight.id = \"bigscoots-inp-highlight\"\n    highlight.style.cssText = `\n      position: fixed !important;\n      pointer-events: none !important;\n      z-index: 999999 !important;\n      border: 3px solid #ff6b35 !important;\n      background: rgba(255, 107, 53, 0.1) !important;\n      border-radius: 4px !important;\n      box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.3) !important;\n      transition: all 0.3s ease !important;\n    `\n\n    // Position the highlight\n    const rect = targetElement.getBoundingClientRect()\n    highlight.style.left = `${rect.left - 3}px`\n    highlight.style.top = `${rect.top - 3}px`\n    highlight.style.width = `${rect.width + 6}px`\n    highlight.style.height = `${rect.height + 6}px`\n\n    // Remove any existing highlights\n    const existingHighlight = document.getElementById(\"bigscoots-inp-highlight\")\n    if (existingHighlight) {\n      existingHighlight.remove()\n    }\n\n    // Add the highlight\n    document.body.appendChild(highlight)\n\n    // Scroll element into view\n    targetElement.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"center\",\n      inline: \"center\",\n    })\n\n    // Add pulsing animation\n    let pulseCount = 0\n    const pulseInterval = setInterval(() => {\n      if (pulseCount >= 6) {\n        clearInterval(pulseInterval)\n        return\n      }\n\n      highlight.style.transform = pulseCount % 2 === 0 ? \"scale(1.05)\" : \"scale(1)\"\n      pulseCount++\n    }, 300)\n\n    // Remove highlight after 3 seconds\n    setTimeout(() => {\n      if (highlight && highlight.parentNode) {\n        highlight.remove()\n      }\n    }, 3000)\n\n    console.log(\"INP element highlighted successfully\")\n    return true\n  } catch (error) {\n    console.error(\"Error highlighting INP element:\", error)\n    return false\n  }\n}\n\n/**\n * Runs the main analysis of the page\n */\nasync function runAnalysis() {\n  console.log(\"=== STARTING PAGE ANALYSIS ===\")\n\n  if (!shouldRunOnDomain()) {\n    console.log(\"Extension should not run on this domain, exiting\")\n    return\n  }\n\n  console.log(\"Initializing performance monitoring...\")\n  // Initialize performance monitoring\n  initializeCLSMonitoring()\n  initializeLCPMonitoring()\n  initializeINPMonitoring()\n  initializeAdditionalMetrics()\n\n  console.log(\"Running analysis promises...\")\n  // Run analysis\n  try {\n    const [images, fonts, headers, sourceCodeInfo] = await Promise.all([\n      getPreloadedImages(),\n      getLoadedAndPreloadedFonts(),\n      getHeaders(),\n      Promise.resolve(analyzeSourceCode()),\n    ])\n\n    console.log(\"Analysis results:\")\n    console.log(\"- Images:\", images.length)\n    console.log(\"- Fonts:\", fonts.length)\n    console.log(\"- Headers:\", Object.keys(headers).length)\n    console.log(\"- Source code info:\", sourceCodeInfo)\n\n    const analysisData = {\n      images,\n      fonts,\n      headers: { ...headers, ...sourceCodeInfo },\n      cls: getCurrentCLSData(),\n      lcp: getCurrentLCPData(),\n      inp: getCurrentINPData(),\n      additionalMetrics: getCurrentAdditionalMetrics(),\n    }\n\n    console.log(\"Sending analysis results to background...\")\n    safeSendMessage({\n      action: \"analysisResults\",\n      ...analysisData,\n    })\n\n    console.log(\"Sending badge update...\")\n    safeSendMessage({\n      action: \"updateBadge\",\n      hostedBy: headers[\"x-hosted-by\"] || \"N/A\",\n      cacheStatus: headers[\"x-bigscoots-cache-status\"] || headers[\"cf-cache-status\"] || \"N/A\",\n    })\n\n    console.log(\"=== PAGE ANALYSIS COMPLETE ===\")\n  } catch (error) {\n    console.error(\"Error during analysis:\", error)\n  }\n}\n\n// Initialize the extension\nconsole.log(\"Starting content script initialization...\")\nrunAnalysis()\n\n// Set up message listener with proper async handling\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  console.log(\"Content script received message:\", request.action)\n\n  // Handle ping requests to verify content script is ready\n  if (request.action === \"ping\") {\n    console.log(\"Content script ping received - responding immediately\")\n    sendResponse({ ready: true })\n    return false // Synchronous response, don't keep channel open\n  }\n\n  if (request.action === \"getCurrentPerformanceData\") {\n    const data = {\n      cls: getCurrentCLSData(),\n      lcp: getCurrentLCPData(),\n      inp: getCurrentINPData(),\n      additionalMetrics: getCurrentAdditionalMetrics(),\n    }\n    console.log(\"Sending current performance data:\", data)\n    sendResponse(data)\n    return false // Synchronous response\n  } else if (request.action === \"highlightImage\") {\n    const success = highlightImageOnPage(request.imageUrl)\n    sendResponse({ success })\n    return false // Synchronous response\n  } else if (request.action === \"highlightLCPElement\") {\n    const success = highlightLCPElement()\n    sendResponse({ success })\n    return false // Synchronous response\n  } else if (request.action === \"highlightCLSElement\") {\n    const success = highlightCLSElement()\n    sendResponse({ success })\n    return false // Synchronous response\n  } else if (request.action === \"highlightINPElement\") {\n    const success = highlightINPElement()\n    sendResponse({ success })\n    return false // Synchronous response\n  } else if (request.action === \"requestAnalysis\") {\n    console.log(\"Fresh analysis requested\")\n    // Re-run the analysis when requested\n    runAnalysis()\n    sendResponse({ success: true })\n    return false // Synchronous response\n  } else if (request.action === \"analyzePSI\") {\n    // Handle PSI analysis request - this is async\n    console.log(\"Received PSI analysis request\")\n\n    // Execute PSI analysis asynchronously\n    const handlePSIAnalysis = async () => {\n      try {\n        console.log(\"Starting PSI analysis...\")\n        const success = await analyzePSIData()\n        console.log(\"PSI analysis completed:\", success)\n        sendResponse({ success: true })\n      } catch (error) {\n        console.error(\"PSI analysis error:\", error)\n        sendResponse({ success: false, error: error.message })\n      }\n    }\n\n    // Start the async operation\n    handlePSIAnalysis()\n\n    return true // Keep message channel open for async response\n  }\n\n  return false // Don't keep channel open for unhandled messages\n})\n\nconsole.log(\"=== CONTENT SCRIPT SETUP COMPLETE ===\")\n","/**\n * Formats a file size in bytes to a human-readable string\n * @param {number} bytes - The size in bytes\n * @returns {string} Formatted size string (e.g., \"1.5 KB\")\n */\nexport function formatFileSize(bytes) {\n  if (!bytes) return \"Unknown\"\n  if (bytes < 1024) return bytes + \" B\"\n  if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + \" KB\"\n  return (bytes / (1024 * 1024)).toFixed(1) + \" MB\"\n}\n\n/**\n * Gets the appropriate background color for a header value\n * @param {string} headerKey - The header key\n * @param {string} value - The header value\n * @returns {string} CSS color value\n */\nexport function getHeaderColor(headerKey, value) {\n  const lowerValue = typeof value === \"string\" ? value.toLowerCase().trim() : \"n/a\"\n  const saneKey = typeof headerKey === \"string\" ? headerKey.toLowerCase().replace(/-/g, \"\") : \"\"\n\n  switch (saneKey) {\n    case \"xbigscootscachestatus\":\n    case \"cfcachestatus\":\n      return getCacheStatusColor(lowerValue)\n    case \"xbigscootscacheplan\":\n      return getCachePlanColor(lowerValue)\n    case \"xbigscootscachemode\":\n    case \"xbigscootscachemodeo2o\":\n      return getEnabledDisabledColor(lowerValue === \"enabled\" || lowerValue === \"true\", lowerValue === \"n/a\")\n    case \"xezoiccdn\":\n      if (lowerValue === \"hit\") return \"var(--success-bg-strong)\"\n      if (lowerValue === \"n/a\" || lowerValue === \"\") return \"var(--neutral-bg)\"\n      return \"var(--error-bg-strong)\"\n    case \"xnpcfe\":\n      if (lowerValue && lowerValue !== \"n/a\" && lowerValue !== \"disabled\" && lowerValue !== \"inactive\")\n        return \"var(--success-bg-strong)\"\n      if (lowerValue === \"n/a\" || lowerValue === \"\") return \"var(--neutral-bg)\"\n      return \"var(--error-bg-strong)\"\n    case \"perfmattersrucss\":\n    case \"perfmattersdelayjs\":\n      return getEnabledDisabledColor(lowerValue === \"enabled\", lowerValue === \"n/a\")\n    case \"xhostedby\":\n      return lowerValue && lowerValue !== \"n/a\" && lowerValue.trim() !== \"\"\n        ? \"var(--info-bg-strong)\"\n        : \"var(--neutral-bg)\"\n    case \"contentencoding\":\n      return lowerValue && lowerValue !== \"n/a\" && lowerValue.trim() !== \"\"\n        ? \"var(--info-bg-strong)\"\n        : \"var(--neutral-bg)\"\n    case \"gtm\":\n    case \"ua\":\n    case \"ga4\":\n    case \"ga\":\n      return lowerValue && lowerValue !== \"n/a\" && lowerValue.trim() !== \"\"\n        ? \"var(--warning-bg-strong)\"\n        : \"var(--neutral-bg)\"\n    case \"adprovider\":\n      if (lowerValue === \"none detected\" || lowerValue === \"n/a\" || lowerValue === \"\") return \"var(--neutral-bg)\"\n      return \"var(--success-bg-strong)\"\n    default:\n      return \"var(--neutral-bg)\"\n  }\n}\n\n/**\n * Gets the color for a cache status value\n * @param {string} status - The cache status\n * @returns {string} CSS color value\n */\nfunction getCacheStatusColor(status) {\n  switch (status) {\n    case \"hit\":\n      return \"var(--success-bg-strong)\"\n    case \"miss\":\n      return \"var(--error-bg-strong)\"\n    case \"bypass\":\n      return \"var(--warning-bg-strong)\"\n    case \"dynamic\":\n      return \"var(--info-bg-strong)\"\n    default:\n      return \"var(--neutral-bg)\"\n  }\n}\n\n/**\n * Gets the color for a cache plan value\n * @param {string} plan - The cache plan\n * @returns {string} CSS color value\n */\nfunction getCachePlanColor(plan) {\n  switch (plan) {\n    case \"standard\":\n      return \"var(--plan-standard-bg)\"\n    case \"performance+\":\n      return \"var(--plan-performance-plus-bg)\"\n    default:\n      return \"var(--neutral-bg)\"\n  }\n}\n\n/**\n * Gets the color for enabled/disabled status\n * @param {boolean} isEnabled - Whether the feature is enabled\n * @param {boolean} isNA - Whether the value is N/A\n * @returns {string} CSS color value\n */\nfunction getEnabledDisabledColor(isEnabled, isNA = false) {\n  if (isNA) return \"var(--neutral-bg)\"\n  return isEnabled ? \"var(--success-bg-strong)\" : \"var(--error-bg-strong)\"\n}\n\n/**\n * Gets the appropriate text color for a background color\n * @param {string} bgColorHexOrVar - The background color\n * @returns {string} CSS color value for text\n */\nexport function getContrastColor(bgColorHexOrVar) {\n  let hexColor = bgColorHexOrVar\n  if (hexColor.startsWith(\"var(--\")) {\n    const varName = hexColor.match(/--([a-zA-Z0-9-]+)/)[0]\n    hexColor = getComputedStyle(document.documentElement).getPropertyValue(varName).trim()\n  }\n\n  if (!hexColor || !hexColor.startsWith(\"#\")) return \"var(--text-primary)\"\n  hexColor = hexColor.slice(1)\n\n  let r, g, b\n  if (hexColor.length === 3) {\n    r = Number.parseInt(hexColor[0] + hexColor[0], 16)\n    g = Number.parseInt(hexColor[1] + hexColor[1], 16)\n    b = Number.parseInt(hexColor[2] + hexColor[2], 16)\n  } else if (hexColor.length === 6) {\n    r = Number.parseInt(hexColor.substr(0, 2), 16)\n    g = Number.parseInt(hexColor.substr(2, 2), 16)\n    b = Number.parseInt(hexColor.substr(4, 2), 16)\n  } else {\n    return \"var(--text-primary)\"\n  }\n  if (isNaN(r) || isNaN(g) || isNaN(b)) return \"var(--text-primary)\"\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000\n\n  if (bgColorHexOrVar.includes(\"-strong\") || bgColorHexOrVar === \"var(--plan-performance-plus-bg)\") {\n    return \"#ffffff\"\n  }\n  if (bgColorHexOrVar === \"var(--plan-standard-bg)\") return \"var(--text-primary)\"\n\n  return yiq >= 145 ? \"var(--text-primary)\" : \"#ffffff\"\n}\n"],"names":["safeSendMessage","message","callback","chrome","runtime","sendMessage","response","lastError","error","clsValue","clsEntries","largestShiftElement","largestShiftValue","calculateShiftValue","source","currentRect","previousRect","Math","abs","x","y","max","width","height","window","innerWidth","innerHeight","extractCLSElementInfo","element","shiftValue","getBoundingClientRect","rect","computedStyle","getComputedStyle","classList","Array","from","backgroundImage","backgroundImageUrl","match","primarySource","src","tagName","toLowerCase","currentSrc","selector","id","length","join","_element$parentElemen","index","parentElement","children","indexOf","e","generateCLSElementSelector","classString","alt","title","textContent","substring","dimensions","offsetWidth","offsetHeight","naturalWidth","naturalHeight","position","top","offsetTop","left","offsetLeft","viewportTop","viewportLeft","styles","display","float","transform","attributes","extractRelevantCLSAttributes","preview","forEach","attr","hasAttribute","getAttribute","removeCLSHighlight","existingHighlight","document","getElementById","remove","getCurrentCLSData","elementInfo","value","entries","rating","lcpValue","lcpElement","lcpElementInfo","initializeLCPMonitoring","PerformanceObserver","entryList","getEntries","lastEntry","startTime","parentInfo","generateElementSelector","objectFit","objectPosition","backgroundSize","backgroundPosition","parent","extractRelevantAttributes","extractElementInfo","action","observe","type","buffered","setTimeout","removeLCPHighlight","getCurrentLCPData","INP_NAMESPACE","Date","now","getINPData","maxINP","interactions","Map","inpEntries","isInitialized","lastSentValue","initializeINPMonitoring","inpData","sendCurrentINPData","supportedEntryTypes","includes","processEntry","entry","interactionId","duration","existing","get","set","elementDetails","target","round","generateSelector","trim","captureElementDetails","entryDetails","name","timestamp","unshift","pop","currentValue","status","list","durationThreshold","initializeManualINPTracking","eventType","addEventListener","event","performance","requestAnimationFrame","method","passive","capture","getCurrentINPData","siblings","filter","child","performanceMetrics","getCurrentAdditionalMetrics","isCriticalPathImage","img","viewportHeight","documentElement","clientHeight","viewportWidth","clientWidth","isAboveFold","bottom","isSignificantSize","displayed","takesViewportSpace","isLikelyHero","isLikelyLogo","className","getImageFormat","url","jpg","jpeg","png","gif","webp","avif","svg","split","getPreloadedImages","uniqueImages","getEntriesByType","initiatorType","querySelectorAll","el","href","fetchpriority","has","Promise","resolve","values","map","resource","imgElement","querySelector","natural","aboveFold","isImageAboveFold","isCritical","format","issues","wastedPixels","push","severity","analyzeImageOptimization","loading","decoding","removeImageHighlights","getFontType","woff2","woff","ttf","otf","eot","async","analyzePSIData","psiData","currentUrl","location","apiUrl","encodeURIComponent","fetch","ok","Error","statusText","data","json","errorMessage","errorDetails","code","fetchPSIData","allFieldData","loadingExperience","metrics","fieldData","overallCategory","overall_category","CUMULATIVE_LAYOUT_SHIFT_SCORE","cls","percentile","category","distributions","LARGEST_CONTENTFUL_PAINT_MS","lcp","INTERACTION_TO_NEXT_PAINT","inp","EXPERIMENTAL_TIME_TO_FIRST_BYTE","ttfb","FIRST_CONTENTFUL_PAINT_MS","fcp","extractAllFieldData","labData","_psiData$data","_psiData$data2","_psiData$data3","lighthouseResult","audits","CLS","LCP","numericValue","displayValue","score","Object","keys","extractLabData","rawData","fromCache","userMessage","analyzeSourceCode","html","outerHTML","perfmattersRUCSS","perfmattersDelayJS","matches","fromEntries","gtm","ua","ga4","ga","key","pattern","Set","adProvider","detectAdProvider","scripts","script","adProviders","Mediavine","domains","patterns","enabled","Ezoic","provider","hasDomain","some","domain","hasPattern","runAnalysis","hostname","endsWith","hadRecentInput","sources","largestSource","reduce","largest","node","entryData","initializeCLSMonitoring","navigation","responseStart","requestStart","domLoad","domContentLoadedEventEnd","navigationStart","pageLoad","loadEventEnd","initializeAdditionalMetrics","images","fonts","headers","sourceCodeInfo","all","fontResources","loadedWithinThreeSeconds","isFontResource","preloadedFonts","crossorigin","uniqueFonts","preloadedFont","find","pf","bytes","loadTime","preloaded","fileSize","transferSize","fileSizeFormatted","toFixed","sort","a","b","cache","credentials","then","header","catch","additionalMetrics","hostedBy","cacheStatus","onMessage","addListener","request","sender","sendResponse","ready","success","imageUrl","targetImage","allElements","highlight","createElement","style","cssText","head","appendChild","scrollTop","pageYOffset","scrollLeft","pageXOffset","body","scrollIntoView","behavior","block","inline","highlightImageOnPage","highlightLCPElement","highlightCLSElement","latestEntry","targetElement","pulseCount","pulseInterval","setInterval","clearInterval","parentNode","highlightINPElement","handlePSIAnalysis"],"sourceRoot":""}